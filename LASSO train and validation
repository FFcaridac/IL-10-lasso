library(corrplot) 
library(glmnet) 
library(caret) 
library(CBCgrps)
library(nortest)
library(tidyverse)
library(ggpubr)
library(rms)
library(pROC)

#DATA import####
data <- na.omit(data)
head(data)
#
data$sex<-as.factor(data$sex)
data$diagnosis<-as.factor(data$diagnosis)
data$T1<-as.factor(data$T1)
data$T2<-as.factor(data$T2)
data[,1:4] <- lapply(data[,1:4],as.factor)

###basline data####
data <- as.data.frame(data)#sometimes need
tab1 <-twogrps(data, gvar = "diagnosis")
write.csv(tab1$Table,file="tab1.csv")

###ROC####
rocdata <- data%>%
  mutate(sex=as.numeric(sex),
         T1=as.numeric(T1),
         T2=as.numeric(T2),)

roc.list <- roc(diagnosis ~ sex+T1+T2+age+
                  WBC+RBC+HGB+PLT+Neut+lymph+EO+BASO+
                  Mono+Neut.+Lymph.+BASO.+Eo.+Mono.+RDW+PCT+MPV+TP+A+G
                +AG+ALT+AST+BUN+Cr+
                  TG+Chol+HDL+LDL+BS+PT+APTT+INR+D_dimer+ESR+
                  +CRP, data = rocdata)

g.list <- ggroc(roc.list,alpha = 0.5, linetype = 1, size = 0.5)
g.list+theme_bw()

#AUC####
auc <- sapply(roc.list,"[",9)
auc <- as.data.frame(auc)
auc <- t(auc)
auc <- as.data.frame(auc)
AUC <- arrange(auc,desc(V1),by_group=FALSE)
write.csv(AUC,"aucall.csv")
ggplot(AUC,aes(x=V1,y=reorder(rownames(AUC),V1)))+
  geom_bar(stat="identity", fill="skyblue", alpha=1, width=.4)


######

library(ggplot2)
library(viridis)
AUC$X1 <- rownames(AUC)
ggplot(AUC, aes(x = V1, y = reorder(X1, V1),fill=V1)) +
  geom_col(width = 0.7) +
  scale_fill_viridis(begin = 0, end = 0.85, option = "D") +
  labs(x = "AUC") +
  ylab("")+
  scale_x_continuous(limits = c(0, 1))+
  theme_classic()+theme(legend.position = 'none')


###Heatmap：####
numdata = data%>%
  mutate(sex = as.factor(sex),
         diagnosis = as.factor(diagnosis),
         T1 = as.factor(T1),
         T2 = as.factor(T2),)%>%
  select(where(is.numeric))
#Matrix
M<-cor(numdata)
M
#test
testRes<-cor.mtest(numdata,conf.level = 0.95)
testRes
par(mfrow=c(2,3))
#####
corrplot(M,method ='circle')
corrplot(
  M,
  method='color',
  type = 'upper',
  add = T ,
  tl.pos = "n",
  cl.pos = "n",
  diag = F,
  p.mat = testRes$p,
  sig.level = c(0.001,0.01,0.05),
  pch.cex = 1.5,
  insig = 'label_sig'
)


###lasso####
#
min_max_scale = function(x){
  (x-min(x))/(max(x)-min(x))
}

data2 = data%>%
  mutate(sex = as.factor(sex),
         diagnosis = as.factor(diagnosis),
         T1 = as.factor(T1),
         T2 = as.factor(T2),)%>%
  mutate_if(.predicate = is.numeric,
            .funs = min_max_scale)%>%
  as.data.frame()

#
set.seed(123) #random number generator
x <- data.matrix(data2[, -1])
y <- data2[, 1]
y<-as.numeric(unlist(y))
#lasso
lasso <- glmnet(x, y, family = "binomial",nlambda = 1000, alpha = 1)
print(lasso)
plot(lasso, xvar = "lambda", label = TRUE)
#cross-validation
lasso.cv = cv.glmnet(x, y,alpha = 1,nfolds =20,family="binomial")
plot(lasso.cv)
lasso.cv$lambda.min #minimum
lasso.cv$lambda.1se #one standard error away
coef(lasso.cv, s = "lambda.1se")

###logistic####
##
set.seed(1234)
train_id = sample(1:nrow(data),0.7*nrow(data))
train=data[train_id,]
test=data[-train_id,]
write.csv(train,file="train.csv")
write.csv(test,file="test.csv")
###logistic and nomogram
mydata<-train
attach(mydata) 
dd<-datadist(mydata) 
options(datadist='dd')
fit0<-lrm(diagnosis ~ age.+Lym.+CPB.+CRRT+Venti., 
          data = mydata, x = T, y = T) 
fit0
summary(fit0)
nom0 <- nomogram(fit0, fun = plogis,fun.at = c(.001,.01,.05,.5, .95, .99,.999),
                 lp = T, funlabel = "diagnosis rate")  
plot(nom0)

fit1<-lrm(diagnosis ~ age.+Lym.+CPB.+CRRT+Venti.+IL10, 
          data = mydata, x = T, y = T) 
fit1
summary(fit1)
##nomogram####
nom1 <- nomogram(fit1, fun = plogis,fun.at = c(.001,.01,.05,.5, .95, .99,.999),
                 lp = T, funlabel = "diagnosis rate")  
plot(nom1)  

###predict预测并做ROC####
gd<-predict(fit1, newdata = train,
            se.fit = FALSE, dispersion = NULL, terms = NULL,
            na.action = na.pass)
gd2<-predict(fit1, newdata = test,
            se.fit = FALSE, dispersion = NULL, terms = NULL,
            na.action = na.pass)
#ROC
library(pROC)
library(ggplot2)
##ROC#####
roc.list <- roc(train$diagnosis, gd)
roc.list
g.list <- ggroc(roc.list, alpha = 1 ,size = 0.8,legacy.axes = TRUE,color="red")
g.list+theme_classic2() + ggtitle("train")+annotate(geom = "segment", x = 0, y = 0, xend =1, yend = 1)
##ROC#####
roc.list <- roc(test$diagnosis, gd2)
roc.list
g.list <- ggroc(roc.list, alpha = 1 ,size = 0.8,legacy.axes = TRUE,color="skyblue")
g.list <- ggroc(roc.list, alpha = 1 ,size = 0.8,legacy.axes = TRUE,color="red")
g.list+theme_classic2() + ggtitle("test")+annotate(geom = "segment", x = 0, y = 0, xend =1, yend = 1)

###callibration train####
ca11 <- calibrate(fit1, cmethod="hare",method="boot", B=1000,
                  xlab = "Nomogram Predicted Probability", ylab = "Actual Survival")
plot(ca11,xlim=c(0,1.0),ylim=c(0,1.0),
     xlab = "Nomogram Predicted Probability", ylab = "Actual Survival")

###callibration test####
fit1 <- glm(diagnosis ~ age.+Lym.+CPB.+CRRT++Venti.+IL10, #改成你的模型变量
            data = mydata,binomial(link = "logit"))
phat <- predict(fit1, newdata = test)
test1 <- test
test1$phat <- phat 

fit2 <- lrm(diagnosis ~ phat, data = test1,x=T,y=T)

cal2 <- calibrate(fit2, method='boot', B=1000)

plot(cal2,
     xlim=c(0,1.0),ylim=c(0,1.0),
     xlab = "Nomogram Predicted Probability", ylab = "Actual Survival")
###DCA####
library(rmda)
t1 <- train
t2 <- test
##numeric
t1$diagnosis <- as.numeric(t1$diagnosis)
t1$diagnosis[t1$diagnosis == 2] <- 0
t2$diagnosis <- as.numeric(t2$diagnosis)
t2$diagnosis[t2$diagnosis == 2] <- 0

complex<-decision_curve(diagnosis ~ age.+Lym.+CPB.+CRRT++Venti.+IL10,###
                        data = t1,family = binomial(link ='logit'),
                        thresholds = seq(0,1, by = 0.01),
                        confidence.intervals= 0.95,
                        study.design = 'case-control',
                        population.prevalence= 0.3)
complex1<-decision_curve(diagnosis ~ age.+Lym.+CPB.+CRRT++Venti.+IL10,###
                         data = t2,family = binomial(link ='logit'),
                         thresholds = seq(0,1, by = 0.01),
                         confidence.intervals= 0.95,
                         study.design = 'case-control',
                         population.prevalence= 0.3)
List<- list(complex1,complex)
plot_decision_curve(List,
                    curve.names=c('test','train'),
                    cost.benefit.axis =FALSE,col= c('red','blue'),
                    confidence.intervals=FALSE,
                    standardize = FALSE)

###without IL10
complex2 <-decision_curve(diagnosis ~ age.+Lym.+CPB.+CRRT++Venti.,###
                        data = t1,family = binomial(link ='logit'),
                        thresholds = seq(0,1, by = 0.01),
                        confidence.intervals= 0.95,
                        study.design = 'case-control',
                        population.prevalence= 0.3)
List2<- list(complex1,complex,complex2)
plot_decision_curve(List2,
                    curve.names=c('test','train',"without IL-10"),
                    cost.benefit.axis =FALSE,col= c('red','blue',"grey"),
                    confidence.intervals=FALSE,
                    standardize = FALSE)
